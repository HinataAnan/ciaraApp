using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
public class ball : MonoBehaviour {

	public Image skillGauge;
	public SkillScript SkillSc;
	public GameObject ballPrefab;
	public Sprite[] ballSprites;

	public LineRenderer line;
	private GameObject firstBall;
	private GameObject lastBall;
	private string currentName;
	public List<GameObject> removableBallList = new List<GameObject>();

	public GameObject scoreGUI;
	private int point = 100;

	public Text chainText;
	public Text comboText;
	public Image comboBack;

	public int chain = 0;
	public int combo = 0;

	private float comboTime = 0;
	private float _comboTime = 3f;

	public TimerScript timeS;

	public float skillP = 20f;
	public float _skillP;

	public GameObject DragSE;
	void Start () {
		for (int i = 0; i < 60; i++) {
			Vector2 pos = new Vector2(Random.Range(-2.0f, 2.0f), 7f);
			GameObject ball = Instantiate(ballPrefab, pos,
				Quaternion.AngleAxis(Random.Range(-40, 40), Vector3.forward)) as GameObject;
			int spriteId = Random.Range(0, 5);
			ball.name = "tumi" + spriteId;
			SpriteRenderer spriteObj = ball.GetComponent<SpriteRenderer>();
			spriteObj.sprite = ballSprites[spriteId];
		}

		//StartCoroutine(DropBall(60));
	}

	void Update () {
		if (!timeS.End&&timeS.start) {
			if (Input.GetMouseButtonDown (0) && firstBall == null) {
				OnDragStart ();
			} else if (Input.GetMouseButtonUp (0)) {
				OnDragEnd ();
			} else if (firstBall != null) {
				OnDragging ();
			}
		} 

		if (comboTime <= 0) {
			combo = 0;
			comboText.text = combo.ToString ();
		} else {
			comboTime -= Time.deltaTime;
			comboBack.fillAmount -= Time.deltaTime / _comboTime;
		}
	}

	private void OnDragStart() {
		RaycastHit2D hit = Physics2D.Raycast (Camera.main.ScreenToWorldPoint (Input.mousePosition), Vector2.zero);

		if (hit.collider != null) {
			GameObject hitObj = hit.collider.gameObject;
			string ballName = hitObj.name;
			if (ballName.StartsWith ("tumi")) {
				firstBall = hitObj;
				lastBall = hitObj;
				currentName = hitObj.name;
				removableBallList = new List<GameObject>();
				PushToList(hitObj);
			}
		}
	}

	private void OnDragging (){
		RaycastHit2D hit = Physics2D.Raycast (Camera.main.ScreenToWorldPoint (Input.mousePosition), Vector2.zero);
		if (hit.collider != null && !hit.transform.GetComponent<corod> ().drag) {

			GameObject hitObj = hit.collider.gameObject;

			if (hitObj.name == currentName && lastBall != hitObj) {
				float distance = Vector2.Distance (hitObj.transform.position, lastBall.transform.position);
				if (distance < 1.5f) {
					lastBall = hitObj;
					PushToList (hitObj);
				}
			}
		}
	}

	private void OnDragEnd () {
		line.SetVertexCount (0);
		int remove_cnt = removableBallList.Count;
		if (remove_cnt >= 3) {
			for (int i = 0; i < remove_cnt; i++) {
				removableBallList [i].GetComponent<corod> ().destroy ();
				//Destroy (removableBallList [i]);
			}
			combo+=1;
			comboTime = _comboTime;
			comboText.text = combo.ToString();
			comboBack.fillAmount = 1;

			scoreGUI.SendMessage ("AddPoint",(point * (combo*0.01+1) * remove_cnt));

			_skillP += remove_cnt;
			skillGauge.fillAmount = _skillP / skillP;
			if (skillGauge.fillAmount >= 1) {
				SkillSc.SkillLock = false;
			}

			StartCoroutine (DropBall (remove_cnt));
		} else {
			for (int i = 0; i < remove_cnt; i++) {
				ChangeColor (removableBallList[i],1.0f);
				removableBallList [i].GetComponent<corod> ().drag = false;
			}
		}

		firstBall = null;
		lastBall = null;
	}

	public IEnumerator DropBall(int count) {
		for (int i = 0; i < count; i++) {
			Vector2 pos = new Vector2(Random.Range(-2.0f, 2.0f), 7f);
			GameObject ball = Instantiate(ballPrefab, pos,
			Quaternion.AngleAxis(Random.Range(-40, 40), Vector3.forward)) as GameObject;
			int spriteId = Random.Range(0, 5);
			ball.name = "tumi" + spriteId;
			SpriteRenderer spriteObj = ball.GetComponent<SpriteRenderer>();
			spriteObj.sprite = ballSprites[spriteId];
			yield return new WaitForSeconds(0.05f);
		}
	}

	void PushToList (GameObject obj) {
		obj.transform.GetComponent<corod> ().drag = true;
		removableBallList.Add (obj);
		line.SetVertexCount (removableBallList.Count);
		for(int i = 0;i<removableBallList.Count;i++){
			line.SetPosition (i, removableBallList [i].transform.position);
		}
		chainText.text = removableBallList.Count.ToString ();

		//色の透明度を50%に落とす
		ChangeColor(obj, 0.5f);
		Instantiate (DragSE);
	}

	void ChangeColor (GameObject obj, float transparency) {
		//SpriteRendererコンポーネントを取得
		SpriteRenderer ballTexture = obj.GetComponent<SpriteRenderer>();
		//Colorプロパティのうち、透明度のみ変更する
		ballTexture.color = new Color(ballTexture.color.r, ballTexture.color.g, ballTexture.color.b, transparency);
	}
		
}
